// Replace `$search` with `$replace` in `$string`
// Used on our SVG icon backgrounds for custom forms.
//
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}


// Gets a color from a theme palette (the output of mat-palette).
// The hue can be one of the standard values (500, A400, etc.), one of the three preconfigured
// hues (default, lighter, darker), or any of the aforementioned prefixed with "-contrast".
//
// @param $color The color palette.
// @param $hue The hue from the palette to use. If this is a value between 0 and 1, it will
//     be treated as opacity.
// @param $opacity The alpha channel value for the color.
@function color($color, $hue: base, $opacity: 1) {
    // If hueKey is a number between zero and one, then it actually contains an
    // opacity value, so recall this function with the default hue and that given opacity.
    @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
        @return color($color, base, $hue);
    }

    $colorFamily: map-get($colors, $color);
    $color: map-get($colorFamily, $hue);
    $opacity: if(opacity($color) < 1, opacity($color), $opacity);

    @return rgba($color, $opacity);
}

// Color contrast
@mixin color-contrast($color) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

  @if ($yiq >= 150) {
    color: color(black);
  } @else {
    color: color(white);
  }
}


// Gets a color from a theme palette (the output of mat-palette).
// The hue can be one of the standard values (500, A400, etc.), one of the three preconfigured
// hues (default, lighter, darker), or any of the aforementioned prefixed with "-contrast".
//
// @param $color The color palette.
// @param $hue The hue from the palette to use. If this is a value between 0 and 1, it will
//     be treated as opacity.
// @param $opacity The alpha channel value for the color.
@function grid-breakpoint($key: "lg") {
    @return map-get($grid-breakpoints, $key);
}


// Gets a spacer amount.
//
// @param $amount The spacer multiplier. Default is 1.
@function gx($amount: 1) {
    @return $amount * $gx;
}

@function px($amount) {
    @return to-string($amount) + 'px';
}

@function str-gx($value) {
    @return str-replace(to-string($value), '.', 'g');
}

@function to-string($value) {
  @return inspect($value);
}