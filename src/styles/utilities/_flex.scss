@import '../references';


@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    // This establishes the main-axis, thus defining the direction flex items are placed in the flex container.
    .flex#{$infix}-row            { flex-direction: row !important; }
    .flex#{$infix}-column         { flex-direction: column !important; }
    .flex#{$infix}-row-reverse    { flex-direction: row-reverse !important; }
    .flex#{$infix}-column-reverse { flex-direction: column-reverse !important; }

    // By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.
    .flex#{$infix}-wrap         { flex-wrap: wrap !important; }
    .flex#{$infix}-nowrap       { flex-wrap: nowrap !important; }
    .flex#{$infix}-wrap-reverse { flex-wrap: wrap-reverse !important; }

    // This defines the alignment along the main axis. It helps distribute extra free space left over when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size.
    .justify-content#{$infix}-start   { justify-content: flex-start !important; }
    .justify-content#{$infix}-end     { justify-content: flex-end !important; }
    .justify-content#{$infix}-center  { justify-content: center !important; }
    .justify-content#{$infix}-between { justify-content: space-between !important; }
    .justify-content#{$infix}-around  { justify-content: space-around !important; }

    // This defines the default behavior for how flex items are laid out along the cross axis on the current line.
    .align-items#{$infix}-start    { align-items: flex-start !important; }
    .align-items#{$infix}-end      { align-items: flex-end !important; }
    .align-items#{$infix}-center   { align-items: center !important; }
    .align-items#{$infix}-baseline { align-items: baseline !important; }
    .align-items#{$infix}-stretch  { align-items: stretch !important; }

    // This aligns a flex container's lines within when there is extra space in the cross-axis, similar to how justify-content aligns individual items within the main-axis.
    .align-content#{$infix}-start   { align-content: flex-start !important; }
    .align-content#{$infix}-end     { align-content: flex-end !important; }
    .align-content#{$infix}-center  { align-content: center !important; }
    .align-content#{$infix}-between { align-content: space-between !important; }
    .align-content#{$infix}-around  { align-content: space-around !important; }
    .align-content#{$infix}-stretch { align-content: stretch !important; }

    // This allows the default alignment (or the one specified by align-items) to be overridden for individual flex items.
    .align-self#{$infix}-auto     { align-self: auto !important; }
    .align-self#{$infix}-start    { align-self: flex-start !important; }
    .align-self#{$infix}-end      { align-self: flex-end !important; }
    .align-self#{$infix}-center   { align-self: center !important; }
    .align-self#{$infix}-baseline { align-self: baseline !important; }
    .align-self#{$infix}-stretch  { align-self: stretch !important; }

    // This defines what order the flex item should appear in it's parent
    .order#{$infix}-first { order: -1; }
    @for $o from 1 through $grid-columns {
        .order#{$infix}-#{$o} { order: $o; }
    }
    .order#{$infix}-last { order: 100000; }

    // This defines the ability for a flex item to grow if necessary.
    .flex#{$infix}-grow { flex-grow: 1; }
    .flex#{$infix}-nogrow { flex-grow: 0; }

    // This defines the ability for a flex item to shrink if necessary.
    .flex#{$infix}-shrink { flex-shrink: 1; }
    .flex#{$infix}-noshrink { flex-shrink: 0; }

    // This defines the default size of an element before the remaining space is distributed.
    .flex-basis#{$infix}-auto { flex-basis: auto; }
    .flex-basis#{$infix}-unset { flex-basis: unset; }
    .flex#{$infix}-nobasis { flex-basis: 0; }

  }
}
